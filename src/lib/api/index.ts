import createFetchClient from "openapi-fetch";
import createClient from "openapi-react-query";
import type { paths } from "./apigen"; // generated by openapi-typescript
import { createClient as createSupabaseClient } from '@supabase/supabase-js';

const API = import.meta.env.VITE_PUBLIC_API_URL;
const supabaseUrl = import.meta.env.VITE_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_PUBLIC_SUPABASE_ANON_KEY;
console.log("API", API, "\n", "supabaseUrl", supabaseUrl, "\n", "supabaseAnonKey", supabaseAnonKey);
const supabase = createSupabaseClient(supabaseUrl, supabaseAnonKey);

export async function apiFetch<T>(
  path: string,
  options: RequestInit = {}
): Promise<T> {
  const { data } = await supabase.auth.getSession();
  const headers = {
    'Content-Type': 'application/json',
    ...(data.session?.access_token
      ? { Authorization: `Bearer ${data.session.access_token}` }
      : {}),
    ...options.headers
  };

  const res = await fetch(`${API}${path}`, { ...options, headers });
  if (!res.ok) throw new Error(await res.text());
  return res.json() as Promise<T>;
}


export const fetchClient = createFetchClient<paths>({
  baseUrl: API,
});

export const $api = createClient(fetchClient);

export default $api;
